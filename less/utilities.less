/*
 * Utility classes.
 *
 * DON'T EDIT THIS FILE. INSTEAD, EDIT THE FILES IN THE CUSTOM DIRECTORY.
*/


/* Remove shadow effect (if enabled) */
.no-shadow {
  box-shadow: none !important;
}

/* Add shadow effect (if disabled) */
.shadow {
  box-shadow: @box-shadow !important;
}


/* Styling of footnotes as generated by Markdown Extra */

.footnote {
  font-size: @service-text-size;
  color: @dark-gray;
}

.footnote::before {
  content: "";
  display: block;
  width: 20%;
  border-bottom: 1px solid @dark-gray;
  margin-bottom: 0.5em;
}

.footnote > hr {
  display: none;
}

.footnote > ol {
  margin-left: 10px;
  list-style-position: inside;
}


/* Styling of footnotes as generated by GitHub Flavored Markdown */

.footnote-line {
  font-size: @service-text-size;
  color: @dark-gray;
}

.footnote-line::before {
  content: "";
  display: block;
  width: 20%;
  border-bottom: 1px solid @dark-gray;
  margin-bottom: 0.5em;
}

.footnote-line > .reversefootnote::before {
  content: "\00a0";
}


/* Floats and clearfix */

.wrap-float {
  clear: none !important;
}

.escape-float,
.no-wrap-float {
  clear: both !important;
}

@media (min-width: @small_breakpoint) {
  .no-wrap-float {
    clear: none !important;
    overflow-x: hidden !important;
  }
}

body.page:not(.fl-builder) div.fl-post-content div.clearfix,
body.single:not(.fl-builder) div.fl-post-content div.clearfix,
div.fl-rich-text div.clearfix {
  margin-top: 48px;
  margin-bottom: 48px;
}

div.clearfix > figure.alignleft:first-child + div > :first-child,
div.clearfix > figure.alignright:first-child + div > :first-child {
  margin-top: 0;
}

div.clearfix > figure.alignleft:first-child + div > :last-child,
div.clearfix > figure.alignright:first-child + div > :last-child {
  margin-bottom: 0;
}

hr + figure.alignleft + *,
hr + figure.alignright + * {
  margin-top: 0;
}

/* Create columns as in this example:
 *
 * <style>
 *
 * .container {
 *   width: 500px;
 * }
 *
 * .col1,
 * .col2,
 * .col3,
 * .col4 {
 *   background: lightgray;
 *   padding: 1em;
 * }
 *
 * </style>
 *
 * <div class="container">
 *   <div class="col1">100%</div>
 *   <div class="col2 width50 first">50%</div>
 *   <div class="col2 width50 last">50%</div>
 *   <div class="col2 width25 first">25%</div>
 *   <div class="col2 width75 last">75%</div>
 *   <div class="col2 width75 first">75%</div>
 *   <div class="col2 width25 last">25%</div>
 *   <div class="col2 width33 first">33%</div>
 *   <div class="col2 width67 last">67%</div>
 *   <div class="col2 width67 first">67%</div>
 *   <div class="col2 width33 last">33%</div>
 *   <div class="col3 width33 first">33%</div>
 *   <div class="col3 width33">33%</div>
 *   <div class="col3 width33 last">33%</div>
 *   <div class="col3 width25 first">25%</div>
 *   <div class="col3 width25">25%</div>
 *   <div class="col3 width50 last">50%</div>
 *   <div class="col3 width25 first">25%</div>
 *   <div class="col3 width50">50%</div>
 *   <div class="col3 width25 last">25%</div>
 *   <div class="col3 width50 first">50%</div>
 *   <div class="col3 width25">25%</div>
 *   <div class="col3 width25 last">25%</div>
 *   <div class="col4 width25 first">25%</div>
 *   <div class="col4 width25">25%</div>
 *   <div class="col4 width25">25%</div>
 *   <div class="col4 width25 last">25%</div>
 * </div>
 */

.col1,
.col2,
.col3,
.col4 {
  box-sizing: border-box;
  float: left;
  margin: 0.5em;
}

.col1 {
  margin-left: 0;
  margin-right: 0;
}

.col2.first,
.col3.first,
.col4.first {
  margin-left: 0;
}

.col2.last,
.col3.last,
.col4.last {
  margin-right: 0;
}

.col1 {
  width: 100%;
}

.col2.width25 {
  width: ~"calc( ( 100% - 1em ) * 1 / 4 )";
}

.col2.width33 {
  width: ~"calc( ( 100% - 1em ) * 1 / 3 )";
}

.col2.width50 {
  width: ~"calc( ( 100% - 1em ) * 1 / 2 )";
}

.col2.width67 {
  width: ~"calc( ( 100% - 1em ) * 2 / 3 )";
}

.col2.width75 {
  width: ~"calc( ( 100% - 1em ) * 3 / 4 )";
}

.col3.width25 {
  width: ~"calc( ( 100% - 2em ) * 1 / 4 )";
}

.col3.width33 {
  width: ~"calc( ( 100% - 2em ) * 1 / 3 )";
}

.col3.width50 {
  width: ~"calc( ( 100% - 2em ) * 2 / 4 )";
}

.col4.width25 {
  width: ~"calc( ( 100% - 3em ) * 1 / 4 )";
}


/* Alternative way to create columns.
 *
 * Start by making an element into a row by ading the class `kntnt-columns`
 * floolwoed by one of the `kntnt-columns-…` classes that identifies how many
 *columns the row should have:;
 *
 *   <div class="kntnt-columns kntnt-columns-50-50">
 *     …
 *   </div>
 *
 * Create the required number of columns:
 *
 *   <div class="kntnt-columns kntnt-columns-25-25-50">
 *     <div> <!-- First column -->
 *       …
 *     </div>
 *     <div> <!-- Second column -->
 *       …
 *     </div>
 *     <div> <!-- Third column -->
 *       …
 *     </div>
 *   </div>
 *
 * Finally, create desired number of cells in each column:
 *
 *   <div class="kntnt-columns kntnt-columns-25-25-50">
 *     <div> <!-- First column -->
 *       <div>…</div> <!-- First cell of first column -->
 *       <div>…</div> <!-- Second cell of first column -->
 *       …
 *       <div>…</div> <!-- Last cell of first column -->
 *     </div>
 *     <div> <!-- Second column -->
 *       …
 *     </div>
 *     <div> <!-- Third column -->
 *       …
 *     </div>
 *   </div>
 *
 * Notice that other elements than <div> can be used. Example:
 *
 *   <div class="kntnt-columns kntnt-columns-50-50">
 *     <div>
 *       <p>List item 1 in column 1</p>
 *       <p>List item 2 in column 1</p>
 *     </div>
 *     <div>
 *       <p>List item 1 in column 2</p>
 *       <p>List item 2 in column 2</p>
 *     </div>
 *   </div>
 *
 * By default, the cells have 0.5em padding, and the objetcs put in them
 * get 0 margin, border-box sizing and block display. Moreover, if lists are
 * used as colunms (as in the example above), outside list style position is
 * applied. All this is to ensure a consisent look in most cases.
 *
 * By adding the class `kntnt-columns-no-gutter` on a column or a row,
 * this default behaviour is stopped for the column or row, respectively.
 *
 *   <div class="kntnt-columns kntnt-columns-50-50 kntnt-columns-no-gutter">
 *     …
 *   </div>
 *
 * It's possible to add rows in columns like this:
 *
 *   <div class="kntnt-columns kntnt-columns-50-50">
 *     <div> <!-- First column -->
 *       <div class="kntnt-columns kntnt-columns-50-50">
 *         <div> <!-- First subcolumn -->
 *           …
 *         </div>
 *         <div> <!-- Second subcolumn -->
 *           …
 *         </div>
 *       </div>
 *     </div>
 *     <div> <!-- Second column -->
 *       …
 *     </div>
 *   </div>
 *
 * The class `kntnt-columns-stack-normal-1024` makes columns stack on
 * top of each other if the wide is smaller than 1024 px:
 * 
 *   <div class="kntnt-columns kntnt-columns-50-50 kntnt-columns-stack-normal-1024">
 *     <div> <!-- First column -->
 *       …
 *     </div>
 *     <div> <!-- Second column -->
 *       …
 *     </div>
 *   </div>
 * 
 * The columns are stacked with the first column above and the second below
 * and so forth. By using the class `kntnt-columns-stack-reverse-1024` instead,
 * the stack order is reversed.
 *
 * The classes `kntnt-columns-stack-normal-768` and
 * `kntnt-columns-stack-reverse-768` works the same but for widths lessthan 768 px.
 *
 * Example:
 *
 *   <div class="kntnt-columns kntnt-columns-50-50 kntnt-columns-stack-normal-768">
 *     <div>
 *       <div class="kntnt-columns kntnt-columns-50-50">
 *         <div>
 *           <p>A</p>
 *         </div>
 *         <div>
 *           <p>B</p>
 *         </div>
 *       </div>
 *       <p>C</p>
 *       <p>D</p>
 *     </div>
 *     <div>
 *       <div>E</div>
 *       <div>F</div>
 *       <div>G</div>      
 *     </div>
 *   </div>
 *   <div class="kntnt-columns kntnt-columns-100">
 *     <div>
 *       <div>H</div>
 *       <div>I</div>      
 *     </div>
 *   </div> 
 */


/* Outer container form a row of columns */

.kntnt-columns {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: flex-start;
  align-items: stretch;
  align-content: flex-start;
}


/* Middle container form a column of elements. */

.kntnt-columns > * {
  flex-grow: 0;
  flex-shrink: 0;
}

.kntnt-columns:not(.kntnt-columns-no-gutter) > ol,
.kntnt-columns:not(.kntnt-columns-no-gutter) > ul {
  list-style-position: outside;
}


/* Columns: 100% */

.kntnt-columns-100 > * {
  flex-basis: 100%;
}


/* Colums: 50% + 50% */

.kntnt-columns-50-50 > * {
  flex-basis: 50%;
}


/* Columns: 33% + 67% */

.kntnt-columns-33-67 > :first-child {
  flex-basis: 33.33%;
}

.kntnt-columns-33-67 > :last-child {
  flex-basis: 66.67%;
}


/* Columns: 67% + 33% */

.kntnt-columns-67-33 > :first-child {
  flex-basis: 66.67%;
}

.kntnt-columns-67-33 > :last-child {
  flex-basis: 33.33%;
}


/* Columns 25% + 75% */

.kntnt-columns-25-75 > :first-child {
  flex-basis: 25%;
}

.kntnt-columns-25-75 > :last-child {
  flex-basis: 75%;
}


/* Columns 75% + 25% */

.kntnt-columns-75-25 > :first-child {
  flex-basis: 75%;
}

.kntnt-columns-75-25 > :last-child {
  flex-basis: 25%;
}


/* Columns 33% + 33% + 33% */

.kntnt-columns-33-33-33 > * {
  flex-basis: 33.33%;
}


/* Columns 25% + 25% + 50% */

.kntnt-columns-25-25-50 > :nth-child(1) {
  flex-basis: 25%;
}

.kntnt-columns-25-25-50 > :nth-child(2) {
  flex-basis: 25%;
}

.kntnt-columns-25-25-50 > :nth-child(3) {
  flex-basis: 50%;
}


/* Columns 25% + 50% + 25% */

.kntnt-columns-25-50-25 > :nth-child(1) {
  flex-basis: 25%;
}

.kntnt-columns-25-50-25 > :nth-child(2) {
  flex-basis: 50%;
}

.kntnt-columns-25-50-25 > :nth-child(3) {
  flex-basis: 25%;
}


/* Columns 50% + 25% + 25% */

.kntnt-columns-50-25-25 > :nth-child(1) {
  flex-basis: 50%;
}

.kntnt-columns-50-25-25 > :nth-child(2) {
  flex-basis: 25%;
}

.kntnt-columns-50-25-25 > :nth-child(3) {
  flex-basis: 25%;
}


/* Columns 25% + 25% + 25% + 25% */

.kntnt-columns-25-25-25-25 > * {
  flex-basis: 25%;
}


/* Inner container form elemens */

.kntnt-columns:not(.kntnt-columns-no-gutter) > :not(.kntnt-columns-no-gutter) > :not(.kntnt-columns) {
  display: block;
  margin: 0;
  padding: 0.5em;
  box-sizing: border-box;
}


/* Responsivity */

@media (max-width: 767px) {

  .kntnt-columns-stack-normal-768 {
    flex-direction: column;
  }

  .kntnt-columns-stack-reverse-768 {
    flex-direction: column-reverse;
  }

}

@media (max-width: 1023px) {

  .kntnt-columns-stack-normal-1024 {
    flex-direction: column;
  }

  .kntnt-columns-stack-reverse-1024 {
    flex-direction: column-reverse;
  }

}


/* Bouncing animation */

.bounce {
  animation: bounce 2s infinite;
}

@keyframes bounce {

  0%,
  20%,
  50%,
  80%,
  100% {
    transform: translateY(0);
  }

  40% {
    transform: translateY(-30px);
  }

  60% {
    transform: translateY(-15px);
  }

}

/* Font sizes */

.h1-size,
.h1-size * {
  font-size: @h1-size;
}

.h2-size,
.h2-size * {
  font-size: @h1-size;
}

.h3-size,
.h3-size * {
  font-size: @h1-size;
}

.h4-size,
.h4-size * {
  font-size: @h1-size;
}

.h5-size,
.h5-size * {
  font-size: @h1-size;
}

.h6-size,
.h6-size * {
  font-size: @h1-size;
}

.text-size,
.text-size * {
  font-size: @text-size;
}

.small-text-size,
.small-text-size * {
  font-size: @small-text-size;
}

.service-text-size,
.service-text-size * {
  font-size: @service-text-size;
}

.monospace-text-size,
.monospace-text-size * {
  font-size: @monospace-text-size;
}


/* Miscellaneous utilities */

.center,
.center-horizontally  {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.center-vertically {
  display: flex;
  align-items: center;
}
